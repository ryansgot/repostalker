apply plugin: 'java-library'
apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

sourceSets {
    main.java.srcDirs += file("$buildDir/generated/source/kapt/main")
    main.java.srcDirs += file("$buildDir/generated/source/kaptKotlin/main")
    test.java.srcDirs += file("$buildDir/generated/source/kapt/test")
    test.java.srcDirs += file("$buildDir/generated/source/kaptKotlin/test")
    // found that sibling project resources were not getting added for tests
    test.resources.srcDirs += rootProject.file("testtools/src/main/resources")
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // kotlin
    implementation deps.kotlin.stdlib

    // auto dsl
    api deps.auto.dsl.annotation
    kapt deps.auto.dsl.processor

    // rx
    implementation deps.rx.java
    implementation deps.rx.kotlin

    // okhttp3
    api deps.square.okhttp3.lib
    api deps.square.okhttp3.loggingInterceptor

    // moshi
    kapt deps.square.moshi.codegen
    api deps.square.moshi.lib
    api deps.square.moshi.adapters

    // retrofit
    api deps.square.retrofit.lib
    api deps.square.retrofit.rxjava2
    api deps.square.retrofit.converterMoshi

    // forsuredb
    compileOnly deps.forsuredb.api

    // JUnit5
    testImplementation project(':testtools')
    testImplementation deps.test.junit5.jupiter.api         // <-- allows running JUnit5 tests
    testImplementation deps.test.junit5.jupiter.params      // <-- allows running JUnit5 parameterized tests
    testRuntimeOnly deps.test.junit5.jupiter.engine         // <-- allows running JUnit5 tests
    testImplementation deps.test.mockk.lib
}

jacoco {
    toolVersion = versions.plugins.jacoco
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    include: ['**/com/fsryan/repostalker/**'],
                    exclude: [
                            '**/*JsonAdapter*',     // <-- generated by moshi-codegen
                            '**/*AutoDslBuilder*'   // <-- generated by AutoDsl
                    ]
            )
        })
    }
}

test {
    useJUnitPlatform()
    jacoco {
        destinationFile = file("${buildDir}/jacoco/test.exec")
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

afterEvaluate {
    tasks.withType(JacocoReport).forEach { t ->
        t.dependsOn += test
    }
}